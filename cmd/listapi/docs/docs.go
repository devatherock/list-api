// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "url": "https://github.com/devatherock"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/{userId}/lists": {
            "get": {
                "description": "Gets all lists for a user",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets all lists for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user id of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.List"
                            }
                        }
                    },
                    "404": {
                        "description": "The user does not have any lists"
                    }
                }
            },
            "post": {
                "description": "Creates a list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user id of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The value of the list",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created list",
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    }
                }
            }
        },
        "/user/{userId}/lists/{listId}": {
            "get": {
                "description": "Gets a specific list of a user",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a specific list of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user id of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the list to get",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    },
                    "404": {
                        "description": "list with the specified id does not exist"
                    }
                }
            },
            "put": {
                "description": "Updates a specific list of a user",
                "consumes": [
                    "application/json"
                ],
                "summary": "Updates a specific list of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user id of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the list to update",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The new value of the list",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "updated successfully"
                    },
                    "404": {
                        "description": "list with the specified id does not exist"
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific list of a user",
                "summary": "Deletes a specific list of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user id of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the list to update",
                        "name": "listId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "deleted successfully"
                    },
                    "404": {
                        "description": "list with the specified id does not exist"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.List": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ListEntry"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "8d314920-b0f9-423c-acfa-17cb610370f6"
                },
                "name": {
                    "type": "string",
                    "example": "Todo"
                }
            }
        },
        "models.ListEntry": {
            "type": "object",
            "properties": {
                "selected": {
                    "type": "boolean",
                    "example": false
                },
                "value": {
                    "type": "string",
                    "example": "Renew insurance"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "https://listapi.herokuapp.com",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "List API",
	Description: "APIs to manage lists.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
